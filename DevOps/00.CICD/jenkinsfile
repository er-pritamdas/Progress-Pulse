pipeline {
    agent { label 'local' }

    environment {
        ENV = 'staging'
        REPO_PATH = '/var/lib/jenkins/Progress-Pulse'
        BACKEND_DOCKER_FILE = 'DevOps/01.Build/Production/backend.Dockerfile'
        FRONTEND_DOCKER_FILE = 'DevOps/01.Build/Production/frontend.Dockerfile'
        PROMETHEUS_DOCKER_FILE = 'DevOps/01.Build/Production/prometheus.Dockerfile'
        BUILD_TAG = "build-${env.BUILD_NUMBER}"
        RELEASE_TAG = "release-${env.BUILD_NUMBER}"

        // Docker Hub Credentials
        DOCKER_PASS = credentials('DOCKER_PASS')
        DOCKER_USER = credentials('DOCKER_USER')
        DOCKER_REPO_NAME = credentials('DOCKER_REPO_NAME')


        MONGO_URI = credentials('MONGO_URI')
        PORT = credentials('PORT')
        USER_DB = credentials('USER_DB')
        HABIT_DB = credentials('HABIT_DB')
        EXPENSE_DB = credentials('EXPENSE_DB')
        EMAIL_USER = credentials('EMAIL_USER')
        EMAIL_PASS = credentials('EMAIL_PASS')
        JWT_SECRET_KEY = credentials('JWT_SECRET_KEY')
        REFRESH_TOKEN_SECRET_KEY = credentials('REFRESH_TOKEN_SECRET_KEY')
        ACCESS_TOKEN_EXPIRY = credentials('ACCESS_TOKEN_EXPIRY')
        REFRESH_TOKEN_EXPIRY = credentials('REFRESH_TOKEN_EXPIRY')
        NODE_ENV = credentials('NODE_ENV')

    }

    stages {
        stage('Setting Up Progress Pulse System') {
            steps {
                script {
                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Ensure required packages are installed
                    echo "=== Installting Prerequisites ==="
                    sh '''
                    set -e
                    echo "Checking prerequisites..."
                    sudo apt-get update -y
                    for pkg in apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release git; do
                        if ! dpkg -s "$pkg" &>/dev/null; then
                            echo "Installing missing package: $pkg"
                            sudo apt-get install -y "$pkg"
                        fi
                    done
                    ''' 
                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Ensure Docker and Docker Compose are installed
                    echo "=== Installing Docker and Docker Compose ==="
                    sh '''
                    echo "Checking Docker installation"
                    if ! command -v docker &> /dev/null; then
                        echo "Docker not found. Installing Docker..."
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /usr/share/keyrings/docker-archive-keyring.gpg > /dev/null
                        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
                            | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                        sudo apt-get update -y
                        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                        sudo systemctl enable docker
                        sudo systemctl start docker
                    else
                        echo "Docker already installed, skipping..."
                    fi
                    docker --version

                    echo "Checking Docker Compose installation"
                    if ! command -v docker-compose &> /dev/null; then
                        echo "Installing Docker Compose..."
                        DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)
                        sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                    else
                        echo "Docker Compose already installed, skipping..."
                    fi
                    docker-compose --version
                    '''
                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Ensure the Progress Pulse repository is cloned or updated
                    echo "=== Update Progress Pulse Repository ==="
                    sh '''
                    set -e
                    if [ ! -d "$REPO_PATH" ]; then
                        echo "Cloning repository..."
                        sudo mkdir -p /var/lib/jenkins
                        cd /var/lib/jenkins
                        sudo git clone https://github.com/er-pritamdas/Progress-Pulse.git
                    else
                        echo "Repository already exists. Pulling latest changes..."
                        cd "$REPO_PATH"
                        sudo git pull
                    fi
                    '''

                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Update Enviornment Variables
                    echo "=== Setting Up Environment Variables ==="
                    sh '''
                    sudo bash -c "cat > $REPO_PATH/Server/.env <<EOF
                    PORT=${PORT}
                    MONGO_URI=${MONGO_URI}
                    USER_DB=${USER_DB}
                    HABIT_DB=${HABIT_DB}
                    EXPENSE_DB=${EXPENSE_DB}
                    EMAIL_USER=${EMAIL_USER}
                    EMAIL_PASS=${EMAIL_PASS}
                    JWT_SECRET_KEY=${JWT_SECRET_KEY}
                    REFRESH_TOKEN_SECRET_KEY=${REFRESH_TOKEN_SECRET_KEY}
                    ACCESS_TOKEN_EXPIRY=${ACCESS_TOKEN_EXPIRY}
                    REFRESH_TOKEN_EXPIRY=${REFRESH_TOKEN_EXPIRY}
                    NODE_ENV=${NODE_ENV}
                    DOCKER_USER=${DOCKER_USER}
                    DOCKER_PASS=${DOCKER_PASS}
                    DOCKER_REPO_NAME=${DOCKER_REPO_NAME}
                    PRACTICEKEY=${PRACTICEKEY}
                    EOF"
                    echo ".env file created successfully."
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                script {

                    def PREV_BUILD_TAG = env.BUILD_NUMBER.toInteger() > 1 ? "build-${env.BUILD_NUMBER.toInteger() - 1}" : null
                    
                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Clean Previous Build Docker Images
                    echo "=== Cleaning Up Previous Build Docker Images ==="

                    if (PREV_BUILD_TAG) {
                    sh """
                    echo "Cleaning previous build images with tag: ${PREV_BUILD_TAG}"
                    docker rmi -f $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-frontend-${PREV_BUILD_TAG} || true
                    docker rmi -f $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-backend-${PREV_BUILD_TAG} || true
                    docker rmi -f $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-prometheus-${PREV_BUILD_TAG} || true
                    docker image prune -f || true
                    """
                    } else {
                    echo "No previous build to clean."
                    }

                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Build Docker Images
                    echo "=== Building Docker Images ==="
                    sh '''
                    cd $REPO_PATH
                    echo "Building Docker image..."
                    docker build -t $ENV-backend -f $BACKEND_DOCKER_FILE Server/
                    docker build -t $ENV-frontend -f $FRONTEND_DOCKER_FILE Client/
                    docker build -t $ENV-prometheus -f $PROMETHEUS_DOCKER_FILE DevOps/05.Monitoring/
                    '''

                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Docker Hub Login
                    echo "=== Logging into DockerHub ==="
                    sh '''
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    '''

                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Push Build Image to DockerHub
                    echo "=== Pushing Build Image to DockerHub ==="
                    sh '''
                    docker tag $ENV-backend $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-backend-${BUILD_TAG}
                    docker tag $ENV-frontend $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-frontend-${BUILD_TAG}
                    docker tag $ENV-prometheus $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-prometheus-${BUILD_TAG}
                    docker push $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-backend-${BUILD_TAG}
                    docker push $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-frontend-${BUILD_TAG}
                    docker push $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-prometheus-${BUILD_TAG}
                    '''

                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Docker Images Cleaning Up
                    echo "=== Cleaning Up Local Docker Images ==="
                    sh '''
                    docker rmi $ENV-backend $ENV-frontend || true
                    docker image prune -f || true
                    '''

                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Docker Hub Logout
                    echo "=== Logging out of DockerHub ==="
                    sh '''
                    docker logout
                    '''
                }
            }
        }

        stage('Test and Monitor') {
            steps {
                script {
                    // ---------------------------------------------------------------------------------------------------------------------------
                    // Test Docker Images
                    echo "=== Testing Docker Images ==="
                    sh '''
                    echo "Pulling image for testing..."
                    docker pull $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-backend-${BUILD_TAG}
                    docker pull $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-frontend-${BUILD_TAG}
                    docker pull $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-prometheus-${BUILD_TAG}
                    BACKEND_IMAGE=$DOCKER_USER/$DOCKER_REPO_NAME:$ENV-backend-${BUILD_TAG} FRONTEND_IMAGE=$DOCKER_USER/$DOCKER_REPO_NAME:$ENV-frontend-${BUILD_TAG} FE_CONTAINER_NAME=$ENV-frontend BE_CONTAINER_NAME=$ENV-backend PROMETHEUS_IMAGE=$DOCKER_USER/$DOCKER_REPO_NAME:$ENV-prometheus-${BUILD_TAG} PROM_CONTAINER_NAME=$ENV-prometheus docker-compose -f $REPO_PATH/DevOps/02.Test/docker-compose.yml up -d
                    '''
                    echo "=== Testing Environment Created Successfully ==="
                    echo "=== Monitoring Environment Created Successfully ==="
                    echo "=== HAPPY TESTING ==="
                }
            }
        }
        // stage('Monitor'){
        //     steps{
        //         script{
        //             // ---------------------------------------------------------------------------------------------------------------------------
        //             // Setup Prometheus Monitoring
        //             echo "=== Setting Up Prometheus Monitoring ==="
        //             sh '''
        //             echo "Pulling Prometheus image for monitoring..."
        //             docker pull $DOCKER_USER/$DOCKER_REPO_NAME:$ENV-prometheus-${BUILD_TAG}
        //             PROMETHEUS_IMAGE=$DOCKER_USER/$DOCKER_REPO_NAME:$ENV-prometheus-${BUILD_TAG} PROM_CONTAINER_NAME=$ENV-prometheus docker-compose -f $REPO_PATH/DevOps/05.Monitoring/docker-compose.yml up -d
        //             '''
        //             echo "=== Prometheus Monitoring Setup Successfully ==="

        //         }
        //     }
        // }

    }

    post {
        always {
            echo "Testing Environment Setup Completed."
            sh 'docker ps'
            sh 'docker images'
        }
    }
}
